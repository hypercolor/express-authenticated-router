// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../express

import { NextFunction, Request, RequestHandler, Response, Router } from 'express';

export type IControllerType = new (req: Request, res: Response, next: NextFunction) => any;
export interface IAuthenticatedRouterOptions {
    middleware?: Array<RequestHandler>;
    controllerBuilder?(controller: IControllerType): RequestHandler;
}
export interface IMountedRoute {
    path: string;
    verb: string;
    controller: IControllerType | undefined;
}
export class AuthenticatedRoute {
    routePrefix: string;
    verb: string;
    controller?: IControllerType;
    constructor(routePrefix: string, router: Router, opts: IAuthenticatedRouterOptions);
    use(middleware: RequestHandler): this;
    get(controller: IControllerType | RequestHandler): this;
    post(controller: IControllerType | RequestHandler): this;
    put(controller: IControllerType | RequestHandler): this;
    patch(controller: IControllerType | RequestHandler): this;
    delete(controller: IControllerType | RequestHandler): this;
    all(controller: IControllerType | RequestHandler): this;
    options(controller: IControllerType | RequestHandler): this;
    head(controller: IControllerType | RequestHandler): this;
}
export class AuthenticatedRouter {
    router: Router;
    get routes(): Array<IMountedRoute>;
    constructor(options?: IAuthenticatedRouterOptions | undefined);
    static build(options: IAuthenticatedRouterOptions, builder: (router: AuthenticatedRouter) => void): AuthenticatedRouter;
    route(route: string): AuthenticatedRoute;
}

